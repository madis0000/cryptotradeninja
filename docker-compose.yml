version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: cryptotradeninja-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: cryptotradeninja
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-Dek.09041976}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cryptotradeninja-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cryptotradeninja"]
      interval: 10s
      timeout: 5s
      retries: 5

  # CryptoTradeNinja Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cryptotradeninja-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DEPLOYMENT: "true"
      PORT: 5000
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Dek.09041976}@postgres:5432/cryptotradeninja
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-change-in-production}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cryptotradeninja-network
    volumes:
      - app_logs:/app/logs

  redis:
    image: redis:7-alpine
    container_name: cryptotradeninja-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cryptotradeninja-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  cryptotradeninja-network:
    driver: bridge
