import { useEffect, useRef, useState } from "react";
import { createChart, ColorType, CandlestickSeries, LineSeries } from 'lightweight-charts';
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { TrendingUp, Expand, BarChart3 } from "lucide-react";
import { useQuery } from "@tanstack/react-query";

interface AdvancedTradingChartProps {
  symbol?: string;
  height?: number;
}

export function AdvancedTradingChart({ symbol = 'BTCUSDT', height = 400 }: AdvancedTradingChartProps) {
  const chartContainerRef = useRef<HTMLDivElement>(null);
  const chartRef = useRef<any>(null);
  const seriesRef = useRef<any>(null);
  const [selectedSymbol, setSelectedSymbol] = useState(symbol);

  // Fetch available markets
  const { data: markets } = useQuery({
    queryKey: ['/api/markets'],
    refetchInterval: 5000,
  });

  // Fetch candlestick data with enhanced error handling
  const { data: candlestickData, isLoading, error } = useQuery({
    queryKey: [`/api/markets/${selectedSymbol}/klines`],
    refetchInterval: 30000,
    retry: 3,
  });

  // Initialize chart with working v5 compatible approach
  useEffect(() => {
    if (!chartContainerRef.current) return;

    const chart = createChart(chartContainerRef.current, {
      layout: {
        background: { type: ColorType.Solid, color: 'transparent' },
        textColor: '#d1d5db',
      },
      grid: {
        vertLines: { color: '#374151' },
        horzLines: { color: '#374151' },
      },
      crosshair: {
        mode: 1,
      },
      rightPriceScale: {
        borderColor: '#485563',
      },
      timeScale: {
        borderColor: '#485563',
        timeVisible: true,
        secondsVisible: false,
      },
      width: chartContainerRef.current.clientWidth,
      height: height,
    });

    // Use correct TradingView Lightweight Charts v5 API
    const candlestickSeries = chart.addSeries(CandlestickSeries, {
      upColor: '#00d4aa',
      downColor: '#ff4976',
      borderDownColor: '#ff4976',
      borderUpColor: '#00d4aa',
      wickDownColor: '#ff4976',
      wickUpColor: '#00d4aa',
    });

    chartRef.current = chart;
    seriesRef.current = candlestickSeries;

    const handleResize = () => {
      if (chartContainerRef.current && chartRef.current) {
        chartRef.current.applyOptions({
          width: chartContainerRef.current.clientWidth,
        });
      }
    };

    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
      if (chartRef.current) {
        chartRef.current.remove();
      }
    };
  }, [height]);

  // Update chart with your real Binance data
  useEffect(() => {
    if (!candlestickData || !seriesRef.current || !Array.isArray(candlestickData)) return;

    try {
      // Handle both CCXT format [timestamp, open, high, low, close, volume] 
      // and Binance format [[timestamp, open, high, low, close, volume, ...]]
      let processedData;
      
      if (candlestickData.length > 0 && Array.isArray(candlestickData[0])) {
        // Binance format or CCXT format
        processedData = candlestickData.map((kline: any) => {
          const timestamp = Array.isArray(kline) ? kline[0] : kline;
          const open = Array.isArray(kline) ? parseFloat(kline[1]) : parseFloat(kline);
          const high = Array.isArray(kline) ? parseFloat(kline[2]) : parseFloat(kline);
          const low = Array.isArray(kline) ? parseFloat(kline[3]) : parseFloat(kline);
          const close = Array.isArray(kline) ? parseFloat(kline[4]) : parseFloat(kline);
          
          return {
            time: Math.floor(timestamp / 1000),
            open,
            high,
            low,
            close,
            value: close, // For line series fallback
          };
        });
      } else {
        // Simple format fallback
        processedData = candlestickData.map((item: any, index: number) => ({
          time: Math.floor(Date.now() / 1000) - (candlestickData.length - index) * 3600,
          value: typeof item === 'number' ? item : parseFloat(item) || 0,
        }));
      }

      seriesRef.current.setData(processedData);
    } catch (error) {
      console.error('Error updating chart with data:', error);
    }
  }, [candlestickData]);

  const currentMarket = Array.isArray(markets) ? markets.find((m: any) => m.symbol === selectedSymbol) : null;
  const price = currentMarket?.price ? parseFloat(currentMarket.price) : 0;
  const change = currentMarket?.priceChangePercent24h ? parseFloat(currentMarket.priceChangePercent24h) : 0;

  if (error) {
    return (
      <Card className="bg-gray-900 border-gray-800">
        <CardContent className="p-6">
          <div className="text-center text-red-400">
            Unable to load market data. Please check your connection to Binance testnet.
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-gray-900 border-gray-800">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
        <div className="flex items-center space-x-2">
          <BarChart3 className="h-5 w-5 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Real-Time Market Chart</h3>
        </div>
        <div className="flex items-center space-x-2">
          <Select value={selectedSymbol} onValueChange={setSelectedSymbol}>
            <SelectTrigger className="w-32 bg-gray-800 border-gray-700 text-white">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="bg-gray-800 border-gray-700">
              {Array.isArray(markets) && markets.map((market: any) => (
                <SelectItem key={market.symbol} value={market.symbol} className="text-white hover:bg-gray-700">
                  {market.symbol}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button variant="outline" size="sm" className="border-gray-700 text-gray-300 hover:bg-gray-800">
            <Expand className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        <div className="px-6 pb-4 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div>
              <div className="text-2xl font-bold text-white">
                ${price.toLocaleString()}
              </div>
              <div className="text-sm text-gray-400">
                {selectedSymbol} â€¢ {isLoading ? 'Loading...' : 'Live'}
              </div>
            </div>
            <Badge 
              variant={change >= 0 ? "default" : "destructive"}
              className={change >= 0 ? "bg-green-600 hover:bg-green-700" : "bg-red-600 hover:bg-red-700"}
            >
              <TrendingUp className="h-3 w-3 mr-1" />
              {change >= 0 ? '+' : ''}{change.toFixed(2)}%
            </Badge>
          </div>
        </div>
        <div 
          ref={chartContainerRef} 
          className="w-full"
          style={{ height: `${height}px` }}
        />
      </CardContent>
    </Card>
  );
}