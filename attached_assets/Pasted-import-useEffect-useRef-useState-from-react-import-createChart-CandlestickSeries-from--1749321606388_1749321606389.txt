import { useEffect, useRef, useState } from 'react';
import { createChart, CandlestickSeries } from 'lightweight-charts';

interface RealTimeBinanceChartProps {
  symbol?: string;
  interval?: string;
  height?: number;
}

interface KlineData {
  openTime: number;
  closeTime: number;
  open: string;
  high: string;
  low: string;
  close: string;
  volume: string;
  trades: number;
  quoteVolume: string;
  isFinal: boolean;
}

export function RealTimeBinanceChart({ 
  symbol = 'BTCUSDT', 
  interval = '1m', 
  height = 400 
}: RealTimeBinanceChartProps) {
  const chartContainerRef = useRef<HTMLDivElement>(null);
  const chartRef = useRef<any>(null);
  const seriesRef = useRef<any>(null);
  const wsRef = useRef<WebSocket | null>(null);
  
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [currentPrice, setCurrentPrice] = useState<string>('0.00');
  const [priceChange, setPriceChange] = useState<{ change: string; percent: string; isPositive: boolean }>({
    change: '0.00',
    percent: '0.00',
    isPositive: true
  });
  
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastPriceRef = useRef<number>(0);

  useEffect(() => {
    if (!chartContainerRef.current) return;

    // Initialize TradingView Lightweight Charts
    const chart = createChart(chartContainerRef.current, {
      width: chartContainerRef.current.clientWidth,
      height: height,
      layout: {
        background: { color: '#ffffff' },
        textColor: '#333',
      },
      grid: {
        vertLines: { color: '#f0f0f0' },
        horzLines: { color: '#f0f0f0' },
      },
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
        borderColor: '#ccc',
      },
      rightPriceScale: {
        borderColor: '#ccc',
      },
      crosshair: {
        mode: 1,
      },
    });

    // Create candlestick series using v5 syntax
    const candlestickSeries = chart.addSeries(CandlestickSeries, {
      upColor: '#26a69a',
      downColor: '#ef5350',
      borderVisible: false,
      wickUpColor: '#26a69a',
      wickDownColor: '#ef5350',
    });

    chartRef.current = chart;
    seriesRef.current = candlestickSeries;

    // Load initial data and start WebSocket
    initializeChart();

    // Handle window resize
    const handleResize = () => {
      if (chartContainerRef.current && chart) {
        chart.applyOptions({ 
          width: chartContainerRef.current.clientWidth 
        });
      }
    };

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
      cleanup();
      if (chart) {
        chart.remove();
      }
    };
  }, [symbol, interval, height]);

  const initializeChart = async () => {
    try {
      await loadHistoricalData();
      setTimeout(() => {
        connectToOfficialBinanceStream();
      }, 500);
    } catch (error) {
      console.error('Failed to initialize chart:', error);
      setError('Failed to initialize market data');
    }
  };

  const loadHistoricalData = async () => {
    try {
      const response = await fetch(`/api/klines?symbol=${symbol}&interval=${interval}&limit=100`);
      if (!response.ok) throw new Error('Failed to fetch historical data');
      
      const data: KlineData[] = await response.json();
      
      if (data.length > 0 && seriesRef.current) {
        // Convert to TradingView format
        const chartData = data.map(candle => ({
          time: Math.floor(candle.openTime / 1000),
          open: parseFloat(candle.open),
          high: parseFloat(candle.high),
          low: parseFloat(candle.low),
          close: parseFloat(candle.close),
        }));

        seriesRef.current.setData(chartData);
        
        // Update current price display
        const latestPrice = parseFloat(data[data.length - 1].close);
        setCurrentPrice(latestPrice.toFixed(2));
        lastPriceRef.current = latestPrice;
        
        // Calculate price change
        if (data.length >= 2) {
          const current = latestPrice;
          const previous = parseFloat(data[data.length - 2].close);
          updatePriceChange(current, previous);
        }
      }
    } catch (error) {
      console.error('Failed to load historical data:', error);
      setError('Failed to load historical market data');
    }
  };

  const connectToOfficialBinanceStream = () => {
    try {
      const stream = `${symbol.toLowerCase()}@kline_${interval}`;
      const wsUrl = `wss://stream.binance.com:9443/ws/${stream}`;
      
      const ws = new WebSocket(wsUrl);
      wsRef.current = ws;
      
      ws.onopen = () => {
        setIsConnected(true);
        setError(null);
      };
      
      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          
          if (data.e === 'kline' && data.k) {
            handleKlineMessage(data.k);
          }
        } catch (error) {
          console.error('Failed to parse WebSocket message:', error);
        }
      };
      
      ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        setError('WebSocket connection error');
        setIsConnected(false);
      };
      
      ws.onclose = (event) => {
        setIsConnected(false);
        
        if (event.code !== 1000) {
          reconnectTimeoutRef.current = setTimeout(() => {
            connectToOfficialBinanceStream();
          }, 3000);
        }
      };
      
    } catch (error) {
      console.error('Failed to create WebSocket connection:', error);
      setError('Failed to connect to market data stream');
    }
  };

  const handleKlineMessage = (kline: any) => {
    if (!seriesRef.current) return;

    const newCandle = {
      time: Math.floor(kline.t / 1000),
      open: parseFloat(kline.o),
      high: parseFloat(kline.h),
      low: parseFloat(kline.l),
      close: parseFloat(kline.c),
    };
    
    // Update current price
    const currentPrice = parseFloat(kline.c);
    setCurrentPrice(currentPrice.toFixed(2));
    
    // Update price change
    if (lastPriceRef.current > 0) {
      updatePriceChange(currentPrice, lastPriceRef.current);
    }
    
    // Update the chart with new candle data
    seriesRef.current.update(newCandle);
    
    // Update the reference price for next comparison
    if (kline.x) { // Only for completed candles
      lastPriceRef.current = currentPrice;
    }
  };

  const updatePriceChange = (current: number, previous: number) => {
    const change = current - previous;
    const percent = previous > 0 ? ((change / previous) * 100) : 0;
    
    setPriceChange({
      change: change.toFixed(2),
      percent: percent.toFixed(2),
      isPositive: change >= 0
    });
  };

  const cleanup = () => {
    if (wsRef.current) {
      wsRef.current.close(1000, 'Component cleanup');
      wsRef.current = null;
    }
    
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    
    setIsConnected(false);
  };

  return (
    <div className="w-full">
      {error && (
        <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
          {error}
        </div>
      )}
      
      <div className="flex items-center justify-between mb-4">
        <div className="text-lg font-semibold">
          {symbol} {interval.toUpperCase()} Chart
        </div>
        <div className="flex items-center space-x-4">
          <div className="text-2xl font-bold text-blue-600">
            ${currentPrice}
          </div>
          <div className={`text-sm font-medium ${priceChange.isPositive ? 'text-green-600' : 'text-red-600'}`}>
            {priceChange.isPositive ? '+' : ''}{priceChange.change} ({priceChange.isPositive ? '+' : ''}{priceChange.percent}%)
          </div>
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />
            <span className="text-sm text-gray-500">
              {isConnected ? 'Live' : 'Connecting...'}
            </span>
          </div>
        </div>
      </div>
      
      <div 
        ref={chartContainerRef}
        className="w-full border border-gray-200 rounded bg-white"
        style={{ height: `${height}px` }}
      />
      
      <div className="mt-2 text-xs text-gray-500">
        TradingView Lightweight Charts • Live Binance WebSocket • Real-time {symbol} candlestick data
      </div>
    </div>
  );
}